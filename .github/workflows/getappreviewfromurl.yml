name: get 1 ios app review

on:
  workflow_dispatch:
    inputs:
      google_app_package_url:
        description: 'Google Playstore URL like https://play.google.com/store/apps/details?id=com.twitter.android'
        type: string
        required: False
      apple_app_package_url:
        description: 'Apple Playstore URL like https://apps.apple.com/us/app/capcut-video-editor/id1500855883'
        type: string
        required: False    
      country:
        description: 'Country like "us","cn"'
        type: string
        required: False
      action:
        description: 'Choose action: "commit" to commit to repo, "upload" to upload to release'
        type: string
        required: False
        default: 'upload'  # Default action is commit

jobs:
  scrape_and_email:
    runs-on: ubuntu-latest
    steps:
      - name: Check out this repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install all necessary packages
        # run: pip install google-play-scraper app_store_scraper pandas 
        run: pip install httpx google-play-scraper pandas aiohttp aiohttp_socks DataRecorder pandas DrissionPage python-dotenv app_store_scraper requests tqdm

      - name: Sanitize input URLs to create valid artifact name
        id: sanitize_url
        run: |
          # Sanitize the URLs by removing 'https://', 'www.' and replacing slashes with underscores
          google_url=${{ github.event.inputs.google_app_package_url }}
          apple_url=${{ github.event.inputs.apple_app_package_url }}
          
          # Function to sanitize URL
          sanitize_url() {
            echo "${1}" | sed 's/https:\/\///' | sed 's/www.//g' | sed 's/\//_/g'
          }

          # Set the artifact name based on the sanitized URL
          google_sanitized=$(sanitize_url "${google_url}")
          apple_sanitized=$(sanitize_url "${apple_url}")
          
          # Output to be used in the next step
          echo "google_sanitized=$google_sanitized" >> $GITHUB_ENV
          echo "apple_sanitized=$apple_sanitized" >> $GITHUB_ENV

      - name: Run the scraping script
        run: python reviews.py
        env:
          apple_app_package_url: ${{ github.event.inputs.apple_app_package_url }}          
          google_app_package_url: ${{ github.event.inputs.google_app_package_url }}          
          country: ${{ github.event.inputs.country }}          

      - name: upload files          
        uses: actions/upload-artifact@v4
        with:
            name: healthapps-${{ env.google_sanitized }}-${{ env.apple_sanitized }}
            path: ./result/ # or path/to/artifact
